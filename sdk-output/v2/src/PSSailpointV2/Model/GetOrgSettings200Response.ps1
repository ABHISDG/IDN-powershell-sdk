#
# SailPoint SaaS API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER ScriptName
No description available.
.PARAMETER SsoDomain
No description available.
.PARAMETER Status
No description available.
.PARAMETER MaxRegisteredIdentities
No description available.
.PARAMETER IdentityCount
No description available.
.PARAMETER KbaReqForAuthn
No description available.
.PARAMETER KbaReqAnswers
No description available.
.PARAMETER LockoutAttemptThreshold
No description available.
.PARAMETER LockoutTimeMinutes
No description available.
.PARAMETER UsageCertRequired
No description available.
.PARAMETER AdminStrongAuthRequired
No description available.
.PARAMETER EnableExternalPasswordChange
No description available.
.PARAMETER EnablePasswordReplay
No description available.
.PARAMETER EnableAutomaticPasswordReplay
No description available.
.PARAMETER Netmasks
No description available.
.PARAMETER CountryCodes
No description available.
.PARAMETER WhiteList
No description available.
.PARAMETER EmailTestMode
No description available.
.PARAMETER EmailTestAddress
No description available.
.PARAMETER UsernameEmptyText
No description available.
.PARAMETER UsernameLabel
No description available.
.PARAMETER EnableAutomationGeneration
No description available.
.PARAMETER PasswordReplayState
No description available.
.PARAMETER SystemNotificationConfig
No description available.
.PARAMETER SystemNotificationEmails
No description available.
.PARAMETER LoginUrl
No description available.
.PARAMETER RedirectPatterns
No description available.
.PARAMETER StyleHash
No description available.
.PARAMETER ApprovalConfig
No description available.
.PARAMETER SsoPartnerSource
No description available.
.OUTPUTS

GetOrgSettings200Response<PSCustomObject>
#>

function Initialize-V2GetOrgSettings200Response {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateCreated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScriptName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsoDomain},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("inactive", "active", "demo", "test")]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxRegisteredIdentities},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IdentityCount},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${KbaReqForAuthn},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${KbaReqAnswers},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LockoutAttemptThreshold},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LockoutTimeMinutes},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UsageCertRequired},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AdminStrongAuthRequired},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableExternalPasswordChange},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnablePasswordReplay},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableAutomaticPasswordReplay},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Netmasks},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CountryCodes},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WhiteList},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EmailTestMode},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailTestAddress},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsernameEmptyText},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsernameLabel},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableAutomationGeneration},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("enabled", "passive", "disabled")]
        [String]
        ${PasswordReplayState},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SystemNotificationConfig},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SystemNotificationEmails},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoginUrl},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RedirectPatterns},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StyleHash},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ApprovalConfig},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsoPartnerSource}
    )

    Process {
        'Creating PSCustomObject: PSSailpointV2 => V2GetOrgSettings200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "scriptName" = ${ScriptName}
            "ssoDomain" = ${SsoDomain}
            "status" = ${Status}
            "maxRegisteredIdentities" = ${MaxRegisteredIdentities}
            "identityCount" = ${IdentityCount}
            "kbaReqForAuthn" = ${KbaReqForAuthn}
            "kbaReqAnswers" = ${KbaReqAnswers}
            "lockoutAttemptThreshold" = ${LockoutAttemptThreshold}
            "lockoutTimeMinutes" = ${LockoutTimeMinutes}
            "usageCertRequired" = ${UsageCertRequired}
            "adminStrongAuthRequired" = ${AdminStrongAuthRequired}
            "enableExternalPasswordChange" = ${EnableExternalPasswordChange}
            "enablePasswordReplay" = ${EnablePasswordReplay}
            "enableAutomaticPasswordReplay" = ${EnableAutomaticPasswordReplay}
            "netmasks" = ${Netmasks}
            "countryCodes" = ${CountryCodes}
            "whiteList" = ${WhiteList}
            "emailTestMode" = ${EmailTestMode}
            "emailTestAddress" = ${EmailTestAddress}
            "usernameEmptyText" = ${UsernameEmptyText}
            "usernameLabel" = ${UsernameLabel}
            "enableAutomationGeneration" = ${EnableAutomationGeneration}
            "passwordReplayState" = ${PasswordReplayState}
            "systemNotificationConfig" = ${SystemNotificationConfig}
            "systemNotificationEmails" = ${SystemNotificationEmails}
            "loginUrl" = ${LoginUrl}
            "redirectPatterns" = ${RedirectPatterns}
            "styleHash" = ${StyleHash}
            "approvalConfig" = ${ApprovalConfig}
            "ssoPartnerSource" = ${SsoPartnerSource}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetOrgSettings200Response<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetOrgSettings200Response<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetOrgSettings200Response<PSCustomObject>
#>
function ConvertFrom-V2JsonToGetOrgSettings200Response {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointV2 => V2GetOrgSettings200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2GetOrgSettings200Response
        $AllProperties = ("id", "name", "description", "dateCreated", "lastUpdated", "scriptName", "ssoDomain", "status", "maxRegisteredIdentities", "identityCount", "kbaReqForAuthn", "kbaReqAnswers", "lockoutAttemptThreshold", "lockoutTimeMinutes", "usageCertRequired", "adminStrongAuthRequired", "enableExternalPasswordChange", "enablePasswordReplay", "enableAutomaticPasswordReplay", "netmasks", "countryCodes", "whiteList", "emailTestMode", "emailTestAddress", "usernameEmptyText", "usernameLabel", "enableAutomationGeneration", "passwordReplayState", "systemNotificationConfig", "systemNotificationEmails", "loginUrl", "redirectPatterns", "styleHash", "approvalConfig", "ssoPartnerSource")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scriptName"))) { #optional property not found
            $ScriptName = $null
        } else {
            $ScriptName = $JsonParameters.PSobject.Properties["scriptName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssoDomain"))) { #optional property not found
            $SsoDomain = $null
        } else {
            $SsoDomain = $JsonParameters.PSobject.Properties["ssoDomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxRegisteredIdentities"))) { #optional property not found
            $MaxRegisteredIdentities = $null
        } else {
            $MaxRegisteredIdentities = $JsonParameters.PSobject.Properties["maxRegisteredIdentities"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityCount"))) { #optional property not found
            $IdentityCount = $null
        } else {
            $IdentityCount = $JsonParameters.PSobject.Properties["identityCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kbaReqForAuthn"))) { #optional property not found
            $KbaReqForAuthn = $null
        } else {
            $KbaReqForAuthn = $JsonParameters.PSobject.Properties["kbaReqForAuthn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kbaReqAnswers"))) { #optional property not found
            $KbaReqAnswers = $null
        } else {
            $KbaReqAnswers = $JsonParameters.PSobject.Properties["kbaReqAnswers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lockoutAttemptThreshold"))) { #optional property not found
            $LockoutAttemptThreshold = $null
        } else {
            $LockoutAttemptThreshold = $JsonParameters.PSobject.Properties["lockoutAttemptThreshold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lockoutTimeMinutes"))) { #optional property not found
            $LockoutTimeMinutes = $null
        } else {
            $LockoutTimeMinutes = $JsonParameters.PSobject.Properties["lockoutTimeMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usageCertRequired"))) { #optional property not found
            $UsageCertRequired = $null
        } else {
            $UsageCertRequired = $JsonParameters.PSobject.Properties["usageCertRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adminStrongAuthRequired"))) { #optional property not found
            $AdminStrongAuthRequired = $null
        } else {
            $AdminStrongAuthRequired = $JsonParameters.PSobject.Properties["adminStrongAuthRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableExternalPasswordChange"))) { #optional property not found
            $EnableExternalPasswordChange = $null
        } else {
            $EnableExternalPasswordChange = $JsonParameters.PSobject.Properties["enableExternalPasswordChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enablePasswordReplay"))) { #optional property not found
            $EnablePasswordReplay = $null
        } else {
            $EnablePasswordReplay = $JsonParameters.PSobject.Properties["enablePasswordReplay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableAutomaticPasswordReplay"))) { #optional property not found
            $EnableAutomaticPasswordReplay = $null
        } else {
            $EnableAutomaticPasswordReplay = $JsonParameters.PSobject.Properties["enableAutomaticPasswordReplay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netmasks"))) { #optional property not found
            $Netmasks = $null
        } else {
            $Netmasks = $JsonParameters.PSobject.Properties["netmasks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countryCodes"))) { #optional property not found
            $CountryCodes = $null
        } else {
            $CountryCodes = $JsonParameters.PSobject.Properties["countryCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "whiteList"))) { #optional property not found
            $WhiteList = $null
        } else {
            $WhiteList = $JsonParameters.PSobject.Properties["whiteList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailTestMode"))) { #optional property not found
            $EmailTestMode = $null
        } else {
            $EmailTestMode = $JsonParameters.PSobject.Properties["emailTestMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailTestAddress"))) { #optional property not found
            $EmailTestAddress = $null
        } else {
            $EmailTestAddress = $JsonParameters.PSobject.Properties["emailTestAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usernameEmptyText"))) { #optional property not found
            $UsernameEmptyText = $null
        } else {
            $UsernameEmptyText = $JsonParameters.PSobject.Properties["usernameEmptyText"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usernameLabel"))) { #optional property not found
            $UsernameLabel = $null
        } else {
            $UsernameLabel = $JsonParameters.PSobject.Properties["usernameLabel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableAutomationGeneration"))) { #optional property not found
            $EnableAutomationGeneration = $null
        } else {
            $EnableAutomationGeneration = $JsonParameters.PSobject.Properties["enableAutomationGeneration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordReplayState"))) { #optional property not found
            $PasswordReplayState = $null
        } else {
            $PasswordReplayState = $JsonParameters.PSobject.Properties["passwordReplayState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemNotificationConfig"))) { #optional property not found
            $SystemNotificationConfig = $null
        } else {
            $SystemNotificationConfig = $JsonParameters.PSobject.Properties["systemNotificationConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemNotificationEmails"))) { #optional property not found
            $SystemNotificationEmails = $null
        } else {
            $SystemNotificationEmails = $JsonParameters.PSobject.Properties["systemNotificationEmails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginUrl"))) { #optional property not found
            $LoginUrl = $null
        } else {
            $LoginUrl = $JsonParameters.PSobject.Properties["loginUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "redirectPatterns"))) { #optional property not found
            $RedirectPatterns = $null
        } else {
            $RedirectPatterns = $JsonParameters.PSobject.Properties["redirectPatterns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "styleHash"))) { #optional property not found
            $StyleHash = $null
        } else {
            $StyleHash = $JsonParameters.PSobject.Properties["styleHash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvalConfig"))) { #optional property not found
            $ApprovalConfig = $null
        } else {
            $ApprovalConfig = $JsonParameters.PSobject.Properties["approvalConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssoPartnerSource"))) { #optional property not found
            $SsoPartnerSource = $null
        } else {
            $SsoPartnerSource = $JsonParameters.PSobject.Properties["ssoPartnerSource"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "dateCreated" = ${DateCreated}
            "lastUpdated" = ${LastUpdated}
            "scriptName" = ${ScriptName}
            "ssoDomain" = ${SsoDomain}
            "status" = ${Status}
            "maxRegisteredIdentities" = ${MaxRegisteredIdentities}
            "identityCount" = ${IdentityCount}
            "kbaReqForAuthn" = ${KbaReqForAuthn}
            "kbaReqAnswers" = ${KbaReqAnswers}
            "lockoutAttemptThreshold" = ${LockoutAttemptThreshold}
            "lockoutTimeMinutes" = ${LockoutTimeMinutes}
            "usageCertRequired" = ${UsageCertRequired}
            "adminStrongAuthRequired" = ${AdminStrongAuthRequired}
            "enableExternalPasswordChange" = ${EnableExternalPasswordChange}
            "enablePasswordReplay" = ${EnablePasswordReplay}
            "enableAutomaticPasswordReplay" = ${EnableAutomaticPasswordReplay}
            "netmasks" = ${Netmasks}
            "countryCodes" = ${CountryCodes}
            "whiteList" = ${WhiteList}
            "emailTestMode" = ${EmailTestMode}
            "emailTestAddress" = ${EmailTestAddress}
            "usernameEmptyText" = ${UsernameEmptyText}
            "usernameLabel" = ${UsernameLabel}
            "enableAutomationGeneration" = ${EnableAutomationGeneration}
            "passwordReplayState" = ${PasswordReplayState}
            "systemNotificationConfig" = ${SystemNotificationConfig}
            "systemNotificationEmails" = ${SystemNotificationEmails}
            "loginUrl" = ${LoginUrl}
            "redirectPatterns" = ${RedirectPatterns}
            "styleHash" = ${StyleHash}
            "approvalConfig" = ${ApprovalConfig}
            "ssoPartnerSource" = ${SsoPartnerSource}
        }

        return $PSO
    }

}

