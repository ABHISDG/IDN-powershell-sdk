#
# IdentityNow Beta API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Workflow ID. This is a UUID generated upon creation.
.PARAMETER ExecutionCount
The number of times this workflow has been executed
.PARAMETER FailureCount
The number of times this workflow has failed during execution
.PARAMETER Created
The date and time the workflow was created
.PARAMETER Creator
The identity that created the workflow.
.OUTPUTS

WorkflowAllOf<PSCustomObject>
#>

function Initialize-BetaWorkflowAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExecutionCount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FailureCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Creator}
    )

    Process {
        'Creating PSCustomObject: PSSailpointBeta => BetaWorkflowAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "executionCount" = ${ExecutionCount}
            "failureCount" = ${FailureCount}
            "created" = ${Created}
            "creator" = ${Creator}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowAllOf<PSCustomObject>
#>
function ConvertFrom-BetaJsonToWorkflowAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointBeta => BetaWorkflowAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaWorkflowAllOf
        $AllProperties = ("id", "executionCount", "failureCount", "created", "creator")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "executionCount"))) { #optional property not found
            $ExecutionCount = $null
        } else {
            $ExecutionCount = $JsonParameters.PSobject.Properties["executionCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failureCount"))) { #optional property not found
            $FailureCount = $null
        } else {
            $FailureCount = $JsonParameters.PSobject.Properties["failureCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creator"))) { #optional property not found
            $Creator = $null
        } else {
            $Creator = $JsonParameters.PSobject.Properties["creator"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "executionCount" = ${ExecutionCount}
            "failureCount" = ${FailureCount}
            "created" = ${Created}
            "creator" = ${Creator}
        }

        return $PSO
    }

}

