#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Json

JSON object

.OUTPUTS

SearchDocument<PSCustomObject>
#>
function ConvertFrom-JsonToSearchDocument {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        # try to match AccessProfile defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToAccessProfile $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "AccessProfile"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'AccessProfile' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match Account1 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToAccount1 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "Account1"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'Account1' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match AccountActivity1 defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToAccountActivity1 $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "AccountActivity1"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'AccountActivity1' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match Aggregation defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToAggregation $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "Aggregation"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'Aggregation' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match Entitlement defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToEntitlement $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "Entitlement"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'Entitlement' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match Identity defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToIdentity $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "Identity"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'Identity' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match ModelEvent defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToModelEvent $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "ModelEvent"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'ModelEvent' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        # try to match Role defined in the oneOf schemas
        try {
            $matchInstance = ConvertFrom-JsonToRole $Json

            foreach($property in $matchInstance.PsObject.Properties) {
                if ($null -ne $property.Value) {
                    $matchType = "Role"
                    $match++
                    break
                }
            }
        } catch {
            # fail to match the schema defined in oneOf, proceed to the next one
            Write-Debug "Failed to match 'Role' defined in oneOf (SearchDocument). Proceeding to the next one if any."
        }

        if ($match -gt 1) {
            throw "Error! The JSON payload matches more than one type defined in oneOf schemas ([AccessProfile, Account1, AccountActivity1, Aggregation, Entitlement, Identity, ModelEvent, Role]). JSON Payload: $($Json)"
        } elseif ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "OneOfSchemas" = @("AccessProfile", "Account1", "AccountActivity1", "Aggregation", "Entitlement", "Identity", "ModelEvent", "Role")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in oneOf schemas ([AccessProfile, Account1, AccountActivity1, Aggregation, Entitlement, Identity, ModelEvent, Role]). JSON Payload: $($Json)"
        }
    }
}

