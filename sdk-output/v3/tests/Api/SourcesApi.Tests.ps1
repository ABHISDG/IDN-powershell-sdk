#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSSailpoint' -name 'SourcesApi' {
    Context 'Invoke-BulkUpdateProvisioningPolicies' {
        It 'Test Invoke-BulkUpdateProvisioningPolicies' {
            #$TestResult = Invoke-BulkUpdateProvisioningPolicies -SourceId "TEST_VALUE" -ProvisioningPolicyDto "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-ProvisioningPolicy' {
        It 'Test New-ProvisioningPolicy' {
            #$TestResult = New-ProvisioningPolicy -SourceId "TEST_VALUE" -ProvisioningPolicyDto "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-Schema' {
        It 'Test New-Schema' {
            #$TestResult = New-Schema -SourceId "TEST_VALUE" -Schema "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-Source' {
        It 'Test New-Source' {
            #$TestResult = New-Source -Source "TEST_VALUE" -ProvisionAsCsv "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteProvisioningPolicy' {
        It 'Test Invoke-DeleteProvisioningPolicy' {
            #$TestResult = Invoke-DeleteProvisioningPolicy -SourceId "TEST_VALUE" -UsageType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteSchema' {
        It 'Test Invoke-DeleteSchema' {
            #$TestResult = Invoke-DeleteSchema -SourceId "TEST_VALUE" -SchemaId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteSource' {
        It 'Test Invoke-DeleteSource' {
            #$TestResult = Invoke-DeleteSource -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DownloadSourceAccountsSchema' {
        It 'Test Invoke-DownloadSourceAccountsSchema' {
            #$TestResult = Invoke-DownloadSourceAccountsSchema -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DownloadSourceEntitlementsSchema' {
        It 'Test Invoke-DownloadSourceEntitlementsSchema' {
            #$TestResult = Invoke-DownloadSourceEntitlementsSchema -Id "TEST_VALUE" -SchemaName "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-ProvisioningPolicy' {
        It 'Test Get-ProvisioningPolicy' {
            #$TestResult = Get-ProvisioningPolicy -SourceId "TEST_VALUE" -UsageType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Schema' {
        It 'Test Get-Schema' {
            #$TestResult = Get-Schema -SourceId "TEST_VALUE" -SchemaId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Source' {
        It 'Test Get-Source' {
            #$TestResult = Get-Source -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-SourceHealth' {
        It 'Test Get-SourceHealth' {
            #$TestResult = Get-SourceHealth -SourceId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListProvisioningPolicies' {
        It 'Test Invoke-ListProvisioningPolicies' {
            #$TestResult = Invoke-ListProvisioningPolicies -SourceId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListSchemas' {
        It 'Test Invoke-ListSchemas' {
            #$TestResult = Invoke-ListSchemas -SourceId "TEST_VALUE" -IncludeTypes "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListSources' {
        It 'Test Invoke-ListSources' {
            #$TestResult = Invoke-ListSources -Limit "TEST_VALUE" -Offset "TEST_VALUE" -Count "TEST_VALUE" -Filters "TEST_VALUE" -Sorters "TEST_VALUE" -ForSubadmin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ReplaceProvisioningPolicy' {
        It 'Test Invoke-ReplaceProvisioningPolicy' {
            #$TestResult = Invoke-ReplaceProvisioningPolicy -SourceId "TEST_VALUE" -UsageType "TEST_VALUE" -ProvisioningPolicyDto "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ReplaceSchema' {
        It 'Test Invoke-ReplaceSchema' {
            #$TestResult = Invoke-ReplaceSchema -SourceId "TEST_VALUE" -SchemaId "TEST_VALUE" -Schema "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ReplaceSource' {
        It 'Test Invoke-ReplaceSource' {
            #$TestResult = Invoke-ReplaceSource -Id "TEST_VALUE" -Source "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-ProvisioningPolicy' {
        It 'Test Update-ProvisioningPolicy' {
            #$TestResult = Update-ProvisioningPolicy -SourceId "TEST_VALUE" -UsageType "TEST_VALUE" -JsonPatchOperation "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Schema' {
        It 'Test Update-Schema' {
            #$TestResult = Update-Schema -SourceId "TEST_VALUE" -SchemaId "TEST_VALUE" -JsonPatchOperation "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Source' {
        It 'Test Update-Source' {
            #$TestResult = Update-Source -Id "TEST_VALUE" -JsonPatchOperation "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-UploadConnectorFile' {
        It 'Test Invoke-UploadConnectorFile' {
            #$TestResult = Invoke-UploadConnectorFile -SourceId "TEST_VALUE" -File "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-UploadSourceAccountsSchema' {
        It 'Test Invoke-UploadSourceAccountsSchema' {
            #$TestResult = Invoke-UploadSourceAccountsSchema -Id "TEST_VALUE" -File "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-UploadSourceEntitlementsSchema' {
        It 'Test Invoke-UploadSourceEntitlementsSchema' {
            #$TestResult = Invoke-UploadSourceEntitlementsSchema -Id "TEST_VALUE" -SchemaName "TEST_VALUE" -File "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
