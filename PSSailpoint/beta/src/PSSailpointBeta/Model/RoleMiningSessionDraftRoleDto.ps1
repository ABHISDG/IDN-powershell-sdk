#
# IdentityNow Beta API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Description
Draft role description
.PARAMETER IdentityIds
The list of identities for this role mining session.
.PARAMETER EntitlementIds
The list of entitlement ids for this role mining session.
.PARAMETER ExcludedEntitlements
The list of excluded entitlement ids.
.PARAMETER Modified
Last modified date
.PARAMETER Name
Name of the draft role
.PARAMETER Type
No description available.
.OUTPUTS

RoleMiningSessionDraftRoleDto<PSCustomObject>
#>

function Initialize-BetaRoleMiningSessionDraftRoleDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IdentityIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EntitlementIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ExcludedEntitlements},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Modified},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SPECIALIZED", "COMMON")]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSSailpointBeta => BetaRoleMiningSessionDraftRoleDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "identityIds" = ${IdentityIds}
            "entitlementIds" = ${EntitlementIds}
            "excludedEntitlements" = ${ExcludedEntitlements}
            "modified" = ${Modified}
            "name" = ${Name}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleMiningSessionDraftRoleDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleMiningSessionDraftRoleDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleMiningSessionDraftRoleDto<PSCustomObject>
#>
function ConvertFrom-BetaJsonToRoleMiningSessionDraftRoleDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointBeta => BetaRoleMiningSessionDraftRoleDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaRoleMiningSessionDraftRoleDto
        $AllProperties = ("description", "identityIds", "entitlementIds", "excludedEntitlements", "modified", "name", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityIds"))) { #optional property not found
            $IdentityIds = $null
        } else {
            $IdentityIds = $JsonParameters.PSobject.Properties["identityIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entitlementIds"))) { #optional property not found
            $EntitlementIds = $null
        } else {
            $EntitlementIds = $JsonParameters.PSobject.Properties["entitlementIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excludedEntitlements"))) { #optional property not found
            $ExcludedEntitlements = $null
        } else {
            $ExcludedEntitlements = $JsonParameters.PSobject.Properties["excludedEntitlements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "identityIds" = ${IdentityIds}
            "entitlementIds" = ${EntitlementIds}
            "excludedEntitlements" = ${ExcludedEntitlements}
            "modified" = ${Modified}
            "name" = ${Name}
            "type" = ${Type}
        }

        return $PSO
    }

}

