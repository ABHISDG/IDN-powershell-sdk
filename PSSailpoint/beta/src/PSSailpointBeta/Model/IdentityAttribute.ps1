#
# IdentityNow Beta API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
The technical name of the identity attribute
.PARAMETER DisplayName
The business-friendly name of the identity attribute
.PARAMETER Standard
Shows if the attribute is 'standard' or default
.PARAMETER Type
The type of the identity attribute
.PARAMETER Multi
Shows if the identity attribute is multi-valued
.PARAMETER Searchable
Shows if the identity attribute is searchable
.PARAMETER System
Shows this is 'system' identity attribute that does not have a source and is not configurable.
.PARAMETER Sources
List of sources for an attribute, this specifies how the value of the rule is derived
.OUTPUTS

IdentityAttribute<PSCustomObject>
#>

function Initialize-BetaIdentityAttribute {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Standard} = $false,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Multi} = $false,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Searchable} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${System} = $false,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Sources}
    )

    Process {
        'Creating PSCustomObject: PSSailpointBeta => BetaIdentityAttribute' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "standard" = ${Standard}
            "type" = ${Type}
            "multi" = ${Multi}
            "searchable" = ${Searchable}
            "system" = ${System}
            "sources" = ${Sources}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentityAttribute<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentityAttribute<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentityAttribute<PSCustomObject>
#>
function ConvertFrom-BetaJsonToIdentityAttribute {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointBeta => BetaIdentityAttribute' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaIdentityAttribute
        $AllProperties = ("name", "displayName", "standard", "type", "multi", "searchable", "system", "sources")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standard"))) { #optional property not found
            $Standard = $null
        } else {
            $Standard = $JsonParameters.PSobject.Properties["standard"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multi"))) { #optional property not found
            $Multi = $null
        } else {
            $Multi = $JsonParameters.PSobject.Properties["multi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchable"))) { #optional property not found
            $Searchable = $null
        } else {
            $Searchable = $JsonParameters.PSobject.Properties["searchable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sources"))) { #optional property not found
            $Sources = $null
        } else {
            $Sources = $JsonParameters.PSobject.Properties["sources"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "standard" = ${Standard}
            "type" = ${Type}
            "multi" = ${Multi}
            "searchable" = ${Searchable}
            "system" = ${System}
            "sources" = ${Sources}
        }

        return $PSO
    }

}

