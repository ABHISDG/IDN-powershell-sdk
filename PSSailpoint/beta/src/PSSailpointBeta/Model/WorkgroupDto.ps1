#
# IdentityNow Beta API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Owner
No description available.
.PARAMETER Id
ID of the object to which this reference applies
.PARAMETER Name
Name of the Governance Group
.PARAMETER Description
Description of the Governance Group
.PARAMETER MemberCount
Number of members in the Governance Group.
.PARAMETER ConnectionCount
Number of connections in the Governance Group.
.OUTPUTS

WorkgroupDto<PSCustomObject>
#>

function Initialize-BetaWorkgroupDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MemberCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ConnectionCount}
    )

    Process {
        'Creating PSCustomObject: PSSailpointBeta => BetaWorkgroupDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "owner" = ${Owner}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "memberCount" = ${MemberCount}
            "connectionCount" = ${ConnectionCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkgroupDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkgroupDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkgroupDto<PSCustomObject>
#>
function ConvertFrom-BetaJsonToWorkgroupDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointBeta => BetaWorkgroupDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaWorkgroupDto
        $AllProperties = ("owner", "id", "name", "description", "memberCount", "connectionCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memberCount"))) { #optional property not found
            $MemberCount = $null
        } else {
            $MemberCount = $JsonParameters.PSobject.Properties["memberCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectionCount"))) { #optional property not found
            $ConnectionCount = $null
        } else {
            $ConnectionCount = $JsonParameters.PSobject.Properties["connectionCount"].value
        }

        $PSO = [PSCustomObject]@{
            "owner" = ${Owner}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "memberCount" = ${MemberCount}
            "connectionCount" = ${ConnectionCount}
        }

        return $PSO
    }

}

