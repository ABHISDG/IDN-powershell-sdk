#
# IdentityNow Beta API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Approvers
List of approvers
.PARAMETER AccountManagers
List of account managers
.PARAMETER Modified
When the request was last modified.
.PARAMETER Created
When the request was created.
.PARAMETER NonEmployeeCount
The number of non-employee records on all sources that *requested-for* user manages.
.OUTPUTS

NonEmployeeSourceAllOf<PSCustomObject>
#>

function Initialize-BetaNonEmployeeSourceAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Approvers},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AccountManagers},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Modified},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NonEmployeeCount}
    )

    Process {
        'Creating PSCustomObject: PSSailpointBeta => BetaNonEmployeeSourceAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "approvers" = ${Approvers}
            "accountManagers" = ${AccountManagers}
            "modified" = ${Modified}
            "created" = ${Created}
            "nonEmployeeCount" = ${NonEmployeeCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NonEmployeeSourceAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to NonEmployeeSourceAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NonEmployeeSourceAllOf<PSCustomObject>
#>
function ConvertFrom-BetaJsonToNonEmployeeSourceAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointBeta => BetaNonEmployeeSourceAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaNonEmployeeSourceAllOf
        $AllProperties = ("approvers", "accountManagers", "modified", "created", "nonEmployeeCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvers"))) { #optional property not found
            $Approvers = $null
        } else {
            $Approvers = $JsonParameters.PSobject.Properties["approvers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountManagers"))) { #optional property not found
            $AccountManagers = $null
        } else {
            $AccountManagers = $JsonParameters.PSobject.Properties["accountManagers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonEmployeeCount"))) { #optional property not found
            $NonEmployeeCount = $null
        } else {
            $NonEmployeeCount = $JsonParameters.PSobject.Properties["nonEmployeeCount"].value
        }

        $PSO = [PSCustomObject]@{
            "approvers" = ${Approvers}
            "accountManagers" = ${AccountManagers}
            "modified" = ${Modified}
            "created" = ${Created}
            "nonEmployeeCount" = ${NonEmployeeCount}
        }

        return $PSO
    }

}

