#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Unique identifier for the discovered application.
.PARAMETER Name
Name of the discovered application.
.PARAMETER DiscoverySource
Source from which the application was discovered.
.PARAMETER DiscoveredVendor
The vendor associated with the discovered application.
.PARAMETER Description
A brief description of the discovered application.
.PARAMETER RecommendedConnectors
List of recommended connectors for the application.
.PARAMETER DiscoveredTimestamp
The timestamp when the application was discovered, in ISO 8601 format.
.OUTPUTS

DiscoveredApplicationsInner<PSCustomObject>
#>

function Initialize-V2024DiscoveredApplicationsInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscoverySource},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscoveredVendor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RecommendedConnectors},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DiscoveredTimestamp}
    )

    Process {
        'Creating PSCustomObject: PSSailpointV2024 => V2024DiscoveredApplicationsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "discoverySource" = ${DiscoverySource}
            "discoveredVendor" = ${DiscoveredVendor}
            "description" = ${Description}
            "recommendedConnectors" = ${RecommendedConnectors}
            "discoveredTimestamp" = ${DiscoveredTimestamp}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DiscoveredApplicationsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to DiscoveredApplicationsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DiscoveredApplicationsInner<PSCustomObject>
#>
function ConvertFrom-V2024JsonToDiscoveredApplicationsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointV2024 => V2024DiscoveredApplicationsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024DiscoveredApplicationsInner
        $AllProperties = ("id", "name", "discoverySource", "discoveredVendor", "description", "recommendedConnectors", "discoveredTimestamp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discoverySource"))) { #optional property not found
            $DiscoverySource = $null
        } else {
            $DiscoverySource = $JsonParameters.PSobject.Properties["discoverySource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discoveredVendor"))) { #optional property not found
            $DiscoveredVendor = $null
        } else {
            $DiscoveredVendor = $JsonParameters.PSobject.Properties["discoveredVendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendedConnectors"))) { #optional property not found
            $RecommendedConnectors = $null
        } else {
            $RecommendedConnectors = $JsonParameters.PSobject.Properties["recommendedConnectors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discoveredTimestamp"))) { #optional property not found
            $DiscoveredTimestamp = $null
        } else {
            $DiscoveredTimestamp = $JsonParameters.PSobject.Properties["discoveredTimestamp"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "discoverySource" = ${DiscoverySource}
            "discoveredVendor" = ${DiscoveredVendor}
            "description" = ${Description}
            "recommendedConnectors" = ${RecommendedConnectors}
            "discoveredTimestamp" = ${DiscoveredTimestamp}
        }

        return $PSO
    }

}

