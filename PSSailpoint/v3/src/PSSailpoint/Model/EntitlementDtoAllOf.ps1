#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Entitlement object that represents entitlement

.PARAMETER Attribute
Name of the entitlement attribute
.PARAMETER Value
Raw value of the entitlement
.PARAMETER Description
Entitlment description
.PARAMETER Attributes
Entitlement attributes
.PARAMETER SourceSchemaObjectType
Schema objectType on the given application that maps to an Account Group
.PARAMETER Privileged
Determines if this Entitlement is privileged.
.PARAMETER CloudGoverned
Determines if this Entitlement is goverened in the cloud.
.PARAMETER Source
No description available.
.OUTPUTS

EntitlementDtoAllOf<PSCustomObject>
#>

function Initialize-EntitlementDtoAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Attribute},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Attributes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceSchemaObjectType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Privileged},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CloudGoverned},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Source}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint => EntitlementDtoAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attribute" = ${Attribute}
            "value" = ${Value}
            "description" = ${Description}
            "attributes" = ${Attributes}
            "sourceSchemaObjectType" = ${SourceSchemaObjectType}
            "privileged" = ${Privileged}
            "cloudGoverned" = ${CloudGoverned}
            "source" = ${Source}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EntitlementDtoAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to EntitlementDtoAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EntitlementDtoAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToEntitlementDtoAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint => EntitlementDtoAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EntitlementDtoAllOf
        $AllProperties = ("attribute", "value", "description", "attributes", "sourceSchemaObjectType", "privileged", "cloudGoverned", "source")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attribute"))) { #optional property not found
            $Attribute = $null
        } else {
            $Attribute = $JsonParameters.PSobject.Properties["attribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributes"))) { #optional property not found
            $Attributes = $null
        } else {
            $Attributes = $JsonParameters.PSobject.Properties["attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceSchemaObjectType"))) { #optional property not found
            $SourceSchemaObjectType = $null
        } else {
            $SourceSchemaObjectType = $JsonParameters.PSobject.Properties["sourceSchemaObjectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privileged"))) { #optional property not found
            $Privileged = $null
        } else {
            $Privileged = $JsonParameters.PSobject.Properties["privileged"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloudGoverned"))) { #optional property not found
            $CloudGoverned = $null
        } else {
            $CloudGoverned = $JsonParameters.PSobject.Properties["cloudGoverned"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        $PSO = [PSCustomObject]@{
            "attribute" = ${Attribute}
            "value" = ${Value}
            "description" = ${Description}
            "attributes" = ${Attributes}
            "sourceSchemaObjectType" = ${SourceSchemaObjectType}
            "privileged" = ${Privileged}
            "cloudGoverned" = ${CloudGoverned}
            "source" = ${Source}
        }

        return $PSO
    }

}

