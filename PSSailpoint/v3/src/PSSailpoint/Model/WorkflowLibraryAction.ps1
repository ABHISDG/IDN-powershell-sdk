#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Action ID. This is a static namespaced ID for the action
.PARAMETER Name
Action Name
.PARAMETER Type
Action type
.PARAMETER Description
Action Description
.PARAMETER FormFields
One or more inputs that the action accepts
.PARAMETER IsDynamicSchema
Determines whether the dynamic output schema is returned in place of the action's output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
.PARAMETER OutputSchema
Defines the output schema, if any, that this action produces.
.OUTPUTS

WorkflowLibraryAction<PSCustomObject>
#>

function Initialize-WorkflowLibraryAction {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FormFields},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDynamicSchema} = $false,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OutputSchema}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint => WorkflowLibraryAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "description" = ${Description}
            "formFields" = ${FormFields}
            "isDynamicSchema" = ${IsDynamicSchema}
            "outputSchema" = ${OutputSchema}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowLibraryAction<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowLibraryAction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowLibraryAction<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowLibraryAction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint => WorkflowLibraryAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowLibraryAction
        $AllProperties = ("id", "name", "type", "description", "formFields", "isDynamicSchema", "outputSchema")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formFields"))) { #optional property not found
            $FormFields = $null
        } else {
            $FormFields = $JsonParameters.PSobject.Properties["formFields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDynamicSchema"))) { #optional property not found
            $IsDynamicSchema = $null
        } else {
            $IsDynamicSchema = $JsonParameters.PSobject.Properties["isDynamicSchema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outputSchema"))) { #optional property not found
            $OutputSchema = $null
        } else {
            $OutputSchema = $JsonParameters.PSobject.Properties["outputSchema"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "description" = ${Description}
            "formFields" = ${FormFields}
            "isDynamicSchema" = ${IsDynamicSchema}
            "outputSchema" = ${OutputSchema}
        }

        return $PSO
    }

}

