#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Id of a SOD exception.
.PARAMETER Created
The time when this SOD exception is created.
.PARAMETER Modified
The time when this SOD exception is modified.
.PARAMETER SodPolicy
No description available.
.PARAMETER Identity
No description available.
.PARAMETER Start
The earliest date-time when this SOD exception is applicable.
.PARAMETER VarEnd
The last date-time when this SOD exception is applicable.
.PARAMETER BusinessJustification
The business justification for the exception.
.PARAMETER MitigatingControl
The mitigating control for the exception.
.PARAMETER AccessCriteria
No description available.
.PARAMETER Origin
No description available.
.OUTPUTS

Exception<PSCustomObject>
#>

function Initialize-Exception {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Modified},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SodPolicy},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Identity},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Start},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${VarEnd},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusinessJustification},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MitigatingControl},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AccessCriteria},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Origin}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint => Exception' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created" = ${Created}
            "modified" = ${Modified}
            "sodPolicy" = ${SodPolicy}
            "identity" = ${Identity}
            "start" = ${Start}
            "end" = ${VarEnd}
            "businessJustification" = ${BusinessJustification}
            "mitigatingControl" = ${MitigatingControl}
            "accessCriteria" = ${AccessCriteria}
            "origin" = ${Origin}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Exception<PSCustomObject>

.DESCRIPTION

Convert from JSON to Exception<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Exception<PSCustomObject>
#>
function ConvertFrom-JsonToException {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint => Exception' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Exception
        $AllProperties = ("id", "created", "modified", "sodPolicy", "identity", "start", "end", "businessJustification", "mitigatingControl", "accessCriteria", "origin")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sodPolicy"))) { #optional property not found
            $SodPolicy = $null
        } else {
            $SodPolicy = $JsonParameters.PSobject.Properties["sodPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) { #optional property not found
            $Start = $null
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end"))) { #optional property not found
            $VarEnd = $null
        } else {
            $VarEnd = $JsonParameters.PSobject.Properties["end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessJustification"))) { #optional property not found
            $BusinessJustification = $null
        } else {
            $BusinessJustification = $JsonParameters.PSobject.Properties["businessJustification"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mitigatingControl"))) { #optional property not found
            $MitigatingControl = $null
        } else {
            $MitigatingControl = $JsonParameters.PSobject.Properties["mitigatingControl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessCriteria"))) { #optional property not found
            $AccessCriteria = $null
        } else {
            $AccessCriteria = $JsonParameters.PSobject.Properties["accessCriteria"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "origin"))) { #optional property not found
            $Origin = $null
        } else {
            $Origin = $JsonParameters.PSobject.Properties["origin"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created" = ${Created}
            "modified" = ${Modified}
            "sodPolicy" = ${SodPolicy}
            "identity" = ${Identity}
            "start" = ${Start}
            "end" = ${VarEnd}
            "businessJustification" = ${BusinessJustification}
            "mitigatingControl" = ${MitigatingControl}
            "accessCriteria" = ${AccessCriteria}
            "origin" = ${Origin}
        }

        return $PSO
    }

}

