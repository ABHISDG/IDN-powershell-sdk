#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This is the model for a Service Desk integration template, used to create and edit Service Desk Integrations.

.PARAMETER Type
The 'type' property specifies the type of the Service Desk integration template.
.PARAMETER Attributes
The 'attributes' property value is a map of attributes available for integrations using this Service Desk integration template.
.PARAMETER ProvisioningConfig
No description available.
.OUTPUTS

ServiceDeskIntegrationTemplateDtoAllOf<PSCustomObject>
#>

function Initialize-ServiceDeskIntegrationTemplateDtoAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type} = "Web Service SDIM",
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Attributes},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProvisioningConfig}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint => ServiceDeskIntegrationTemplateDtoAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Attributes) {
            throw "invalid value for 'Attributes', 'Attributes' cannot be null."
        }

        if ($null -eq $ProvisioningConfig) {
            throw "invalid value for 'ProvisioningConfig', 'ProvisioningConfig' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "attributes" = ${Attributes}
            "provisioningConfig" = ${ProvisioningConfig}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceDeskIntegrationTemplateDtoAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceDeskIntegrationTemplateDtoAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceDeskIntegrationTemplateDtoAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToServiceDeskIntegrationTemplateDtoAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint => ServiceDeskIntegrationTemplateDtoAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServiceDeskIntegrationTemplateDtoAllOf
        $AllProperties = ("type", "attributes", "provisioningConfig")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attributes' missing."
        } else {
            $Attributes = $JsonParameters.PSobject.Properties["attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisioningConfig"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provisioningConfig' missing."
        } else {
            $ProvisioningConfig = $JsonParameters.PSobject.Properties["provisioningConfig"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "attributes" = ${Attributes}
            "provisioningConfig" = ${ProvisioningConfig}
        }

        return $PSO
    }

}

