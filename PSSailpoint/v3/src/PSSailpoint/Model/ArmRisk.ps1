#
# IdentityNow V3 API
# Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An object containing the details of an ARM risk listing of the SOD violation reasons detected by this check.

.PARAMETER Name
Risk Name
.PARAMETER Description
Description
.PARAMETER Owners
List of risk owners' SAP usernames
.PARAMETER ExternalReference
URL to ""what if"" details in ARM
.PARAMETER Rating
Risk Rating
.PARAMETER BusinessFunctions
A map from business function codes to ""Left side"" or ""Right side""
.PARAMETER Approvers
List of risk approvers' SAP usernames
.PARAMETER MitigatingControls
What was done to mitigate risks
.PARAMETER CorrectionAdvice
Recommendation on how to resolve risk
.OUTPUTS

ArmRisk<PSCustomObject>
#>

function Initialize-ArmRisk {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Owners},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalReference},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Rating},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${BusinessFunctions},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Approvers},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MitigatingControls},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CorrectionAdvice}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint => ArmRisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "owners" = ${Owners}
            "externalReference" = ${ExternalReference}
            "rating" = ${Rating}
            "businessFunctions" = ${BusinessFunctions}
            "approvers" = ${Approvers}
            "mitigatingControls" = ${MitigatingControls}
            "correctionAdvice" = ${CorrectionAdvice}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArmRisk<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArmRisk<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArmRisk<PSCustomObject>
#>
function ConvertFrom-JsonToArmRisk {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint => ArmRisk' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ArmRisk
        $AllProperties = ("name", "description", "owners", "externalReference", "rating", "businessFunctions", "approvers", "mitigatingControls", "correctionAdvice")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalReference"))) { #optional property not found
            $ExternalReference = $null
        } else {
            $ExternalReference = $JsonParameters.PSobject.Properties["externalReference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rating"))) { #optional property not found
            $Rating = $null
        } else {
            $Rating = $JsonParameters.PSobject.Properties["rating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessFunctions"))) { #optional property not found
            $BusinessFunctions = $null
        } else {
            $BusinessFunctions = $JsonParameters.PSobject.Properties["businessFunctions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvers"))) { #optional property not found
            $Approvers = $null
        } else {
            $Approvers = $JsonParameters.PSobject.Properties["approvers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mitigatingControls"))) { #optional property not found
            $MitigatingControls = $null
        } else {
            $MitigatingControls = $JsonParameters.PSobject.Properties["mitigatingControls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "correctionAdvice"))) { #optional property not found
            $CorrectionAdvice = $null
        } else {
            $CorrectionAdvice = $JsonParameters.PSobject.Properties["correctionAdvice"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "owners" = ${Owners}
            "externalReference" = ${ExternalReference}
            "rating" = ${Rating}
            "businessFunctions" = ${BusinessFunctions}
            "approvers" = ${Approvers}
            "mitigatingControls" = ${MitigatingControls}
            "correctionAdvice" = ${CorrectionAdvice}
        }

        return $PSO
    }

}

