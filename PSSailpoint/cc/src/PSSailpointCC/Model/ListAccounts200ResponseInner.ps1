#
# IdentityNow cc (private) APIs
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Type
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER Username
No description available.
.PARAMETER PasswordRequired
No description available.
.PARAMETER PasswordProvided
No description available.
.PARAMETER Apps
No description available.
.PARAMETER SsoMethod
No description available.
.PARAMETER IdEncryption
No description available.
.PARAMETER PasswordEncryption
No description available.
.PARAMETER LastPasswdChange
No description available.
.PARAMETER ServiceName
No description available.
.PARAMETER DateDisabled
No description available.
.PARAMETER AccountServiceId
No description available.
.PARAMETER ServiceId
No description available.
.PARAMETER PendingPasswordRequestId
No description available.
.PARAMETER PasswordChangeStatus
No description available.
.PARAMETER PasswordChangeResult
No description available.
.OUTPUTS

ListAccounts200ResponseInner<PSCustomObject>
#>

function Initialize-CCListAccounts200ResponseInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PasswordRequired},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PasswordProvided},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Apps},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsoMethod},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdEncryption},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordEncryption},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastPasswdChange},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateDisabled},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AccountServiceId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ServiceId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PendingPasswordRequestId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordChangeStatus},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PasswordChangeResult}
    )

    Process {
        'Creating PSCustomObject: PSSailpointCC => CCListAccounts200ResponseInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "displayName" = ${DisplayName}
            "username" = ${Username}
            "passwordRequired" = ${PasswordRequired}
            "passwordProvided" = ${PasswordProvided}
            "apps" = ${Apps}
            "ssoMethod" = ${SsoMethod}
            "idEncryption" = ${IdEncryption}
            "passwordEncryption" = ${PasswordEncryption}
            "lastPasswdChange" = ${LastPasswdChange}
            "serviceName" = ${ServiceName}
            "dateDisabled" = ${DateDisabled}
            "accountServiceId" = ${AccountServiceId}
            "serviceId" = ${ServiceId}
            "pendingPasswordRequestId" = ${PendingPasswordRequestId}
            "passwordChangeStatus" = ${PasswordChangeStatus}
            "passwordChangeResult" = ${PasswordChangeResult}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ListAccounts200ResponseInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ListAccounts200ResponseInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ListAccounts200ResponseInner<PSCustomObject>
#>
function ConvertFrom-CCJsonToListAccounts200ResponseInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointCC => CCListAccounts200ResponseInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CCListAccounts200ResponseInner
        $AllProperties = ("id", "type", "displayName", "username", "passwordRequired", "passwordProvided", "apps", "ssoMethod", "idEncryption", "passwordEncryption", "lastPasswdChange", "serviceName", "dateDisabled", "accountServiceId", "serviceId", "pendingPasswordRequestId", "passwordChangeStatus", "passwordChangeResult")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordRequired"))) { #optional property not found
            $PasswordRequired = $null
        } else {
            $PasswordRequired = $JsonParameters.PSobject.Properties["passwordRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordProvided"))) { #optional property not found
            $PasswordProvided = $null
        } else {
            $PasswordProvided = $JsonParameters.PSobject.Properties["passwordProvided"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apps"))) { #optional property not found
            $Apps = $null
        } else {
            $Apps = $JsonParameters.PSobject.Properties["apps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssoMethod"))) { #optional property not found
            $SsoMethod = $null
        } else {
            $SsoMethod = $JsonParameters.PSobject.Properties["ssoMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idEncryption"))) { #optional property not found
            $IdEncryption = $null
        } else {
            $IdEncryption = $JsonParameters.PSobject.Properties["idEncryption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordEncryption"))) { #optional property not found
            $PasswordEncryption = $null
        } else {
            $PasswordEncryption = $JsonParameters.PSobject.Properties["passwordEncryption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastPasswdChange"))) { #optional property not found
            $LastPasswdChange = $null
        } else {
            $LastPasswdChange = $JsonParameters.PSobject.Properties["lastPasswdChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceName"))) { #optional property not found
            $ServiceName = $null
        } else {
            $ServiceName = $JsonParameters.PSobject.Properties["serviceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateDisabled"))) { #optional property not found
            $DateDisabled = $null
        } else {
            $DateDisabled = $JsonParameters.PSobject.Properties["dateDisabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountServiceId"))) { #optional property not found
            $AccountServiceId = $null
        } else {
            $AccountServiceId = $JsonParameters.PSobject.Properties["accountServiceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceId"))) { #optional property not found
            $ServiceId = $null
        } else {
            $ServiceId = $JsonParameters.PSobject.Properties["serviceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pendingPasswordRequestId"))) { #optional property not found
            $PendingPasswordRequestId = $null
        } else {
            $PendingPasswordRequestId = $JsonParameters.PSobject.Properties["pendingPasswordRequestId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordChangeStatus"))) { #optional property not found
            $PasswordChangeStatus = $null
        } else {
            $PasswordChangeStatus = $JsonParameters.PSobject.Properties["passwordChangeStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordChangeResult"))) { #optional property not found
            $PasswordChangeResult = $null
        } else {
            $PasswordChangeResult = $JsonParameters.PSobject.Properties["passwordChangeResult"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "displayName" = ${DisplayName}
            "username" = ${Username}
            "passwordRequired" = ${PasswordRequired}
            "passwordProvided" = ${PasswordProvided}
            "apps" = ${Apps}
            "ssoMethod" = ${SsoMethod}
            "idEncryption" = ${IdEncryption}
            "passwordEncryption" = ${PasswordEncryption}
            "lastPasswdChange" = ${LastPasswdChange}
            "serviceName" = ${ServiceName}
            "dateDisabled" = ${DateDisabled}
            "accountServiceId" = ${AccountServiceId}
            "serviceId" = ${ServiceId}
            "pendingPasswordRequestId" = ${PendingPasswordRequestId}
            "passwordChangeStatus" = ${PasswordChangeStatus}
            "passwordChangeResult" = ${PasswordChangeResult}
        }

        return $PSO
    }

}

