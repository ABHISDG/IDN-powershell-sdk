#
# IdentityNow cc (private) APIs
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
The ID of the cluster to update
.PARAMETER GmtOffset
The GMT offset for the timezone the cluster operates with
.OUTPUTS

UpdateClusterRequest<PSCustomObject>
#>

function Initialize-CCUpdateClusterRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GmtOffset}
    )

    Process {
        'Creating PSCustomObject: PSSailpointCC => CCUpdateClusterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "gmtOffset" = ${GmtOffset}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateClusterRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateClusterRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateClusterRequest<PSCustomObject>
#>
function ConvertFrom-CCJsonToUpdateClusterRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpointCC => CCUpdateClusterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CCUpdateClusterRequest
        $AllProperties = ("id", "gmtOffset")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gmtOffset"))) { #optional property not found
            $GmtOffset = $null
        } else {
            $GmtOffset = $JsonParameters.PSobject.Properties["gmtOffset"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "gmtOffset" = ${GmtOffset}
        }

        return $PSO
    }

}

