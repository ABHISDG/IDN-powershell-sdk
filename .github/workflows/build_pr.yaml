name: "Build Powershell SDK"

env:
  SAIL_CLIENT_ID: ${{ secrets.SDK_TEST_TENANT_CLIENT_ID }}
  SAIL_CLIENT_SECRET: ${{ secrets.SDK_TEST_TENANT_CLIENT_SECRET }}
  SAIL_BASE_URL: ${{ secrets.SDK_TEST_TENANT_BASE_URL }}

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_powershell_sdk:
    name: Build powershell SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Checkout API Specs Repo
        uses: actions/checkout@v3
        with:
          repository: sailpoint-oss/api-specs
          path: api-specs
          ref: main

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Run Prescript
        id: prescript
        run: |
          node sdk-resources/prescript.js api-specs/idn

      - name: Build V3 SDK
        id: buildV3
        run: |
          rm -rf ./PSSailpoint/v3
          java -jar openapi-generator-cli.jar generate -i api-specs/idn/sailpoint-api.v3.yaml -g powershell -o PSSailpoint/v3 --global-property skipFormModel=false --config sdk-resources/v3-config.yaml
          node sdk-resources/postscript.js ./PSSailpoint/v3

      - name: Build Beta SDK
        id: buildBeta
        if: steps.buildV3.outcome == 'success'
        run: |
          rm -rf ./PSSailpoint/beta
          java -jar openapi-generator-cli.jar generate -i api-specs/idn/sailpoint-api.beta.yaml -g powershell -o PSSailpoint/beta --global-property skipFormModel=false --config sdk-resources/beta-config.yaml
          node sdk-resources/postscript.js ./PSSailpoint/beta

      - name: After SDK Build
        if: steps.buildBeta.outcome == 'success'
        shell: pwsh
        run: |
          $DebugPreference="Continue"
          Import-Module -Name '.\PSSailpoint' -Verbose

          Install-Module -Name Pester -Force
          Invoke-Pester -Output Detailed ./PSSailpoint/tests/
  failing-job:
            runs-on: ubuntu-latest
            steps:
              - name: failing step
                run: exit 1
  build_powershell_sdk-failure:
            runs-on: ubuntu-latest
            if: ${{ always() && (needs.failing-job.result == 'failure' || needs.failing-job.result == 'timed_out') }}
            needs:
              - failing-job
            steps:
              - name: Invoke GithubNotificationsFunction Lambda
                run: |
                  curl -X POST \
                    -H "Content-Type: application/json" \
                    -d '{
                      "workflowName": "${{ github.job }}",
                      "repositoryName": "${{ github.event.repository.name }}",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }' \
                    "${{ secrets.NOTIFICATIONS_FUNCTION_URL }}"